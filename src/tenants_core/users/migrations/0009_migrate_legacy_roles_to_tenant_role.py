# Generated by Django 5.0.14 on 2025-10-21 11:17

from django.db import migrations


def migrate_legacy_roles_to_tenant_role(apps, schema_editor):
    """
    Migrate existing TenantMembership records from legacy role CharField
    to the new tenant_role ForeignKey.

    Maps:
    - 'owner' -> Owner role
    - 'admin' -> Admin role
    - 'manager' -> Manager role
    - 'staff' -> Staff role
    - 'viewer' -> Viewer role
    """
    TenantMembership = apps.get_model('users', 'TenantMembership')
    TenantRole = apps.get_model('rbac', 'TenantRole')

    # Role type mapping
    role_type_mapping = {
        'owner': 'owner',
        'admin': 'admin',
        'manager': 'manager',
        'staff': 'staff',
        'viewer': 'viewer',
    }

    print("\n🔄 Migrating legacy roles to TenantRole FK...")

    # Get all memberships that don't have a tenant_role assigned yet
    memberships_to_migrate = TenantMembership.objects.filter(
        tenant_role__isnull=True
    ).select_related('tenant')

    total_count = memberships_to_migrate.count()
    print(f"  📊 Found {total_count} membership(s) to migrate")

    if total_count == 0:
        print("  ✅ No memberships to migrate\n")
        return

    migrated_count = 0
    error_count = 0

    for membership in memberships_to_migrate:
        try:
            # Get the legacy role value
            legacy_role = membership.role

            if not legacy_role:
                print(f"  ⚠️  Membership {membership.id}: No legacy role set, skipping")
                continue

            # Map to role_type
            role_type = role_type_mapping.get(legacy_role)

            if not role_type:
                print(f"  ⚠️  Membership {membership.id}: Unknown role '{legacy_role}', defaulting to 'staff'")
                role_type = 'staff'

            # Find the corresponding TenantRole for this tenant
            try:
                tenant_role = TenantRole.objects.get(
                    tenant_id=membership.tenant_id,
                    role_type=role_type,
                    is_system=True  # Only match system roles
                )

                # Assign the tenant_role
                membership.tenant_role = tenant_role
                membership.save(update_fields=['tenant_role'])

                migrated_count += 1
                print(f"  ✅ Migrated membership {membership.id}: '{legacy_role}' -> TenantRole '{tenant_role.name}'")

            except TenantRole.DoesNotExist:
                error_count += 1
                print(f"  ❌ Membership {membership.id}: TenantRole '{role_type}' not found for tenant {membership.tenant_id}")
                print(f"     This might happen if system roles weren't seeded for this tenant")

        except Exception as e:
            error_count += 1
            print(f"  ❌ Error migrating membership {membership.id}: {e}")

    print(f"\n📈 Migration Summary:")
    print(f"  Total: {total_count}")
    print(f"  Migrated: {migrated_count}")
    print(f"  Errors: {error_count}")
    print("✨ Legacy role migration complete!\n")


def reverse_migration(apps, schema_editor):
    """
    Reverse the migration by clearing tenant_role FK.
    The legacy role field is preserved, so we can just null out tenant_role.
    """
    TenantMembership = apps.get_model('users', 'TenantMembership')

    print("\n🔄 Reversing TenantRole migration...")
    updated_count = TenantMembership.objects.filter(
        tenant_role__isnull=False
    ).update(tenant_role=None)
    print(f"✅ Cleared tenant_role from {updated_count} membership(s)\n")


class Migration(migrations.Migration):

    dependencies = [
        ("users", "0008_tenantmembership_tenant_role_and_more"),
        ("rbac", "0002_seed_system_roles"),  # Ensure system roles exist before migration
    ]

    operations = [
        migrations.RunPython(migrate_legacy_roles_to_tenant_role, reverse_migration),
    ]
