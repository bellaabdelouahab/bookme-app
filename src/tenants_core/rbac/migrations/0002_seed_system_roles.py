# Generated by Django 5.0.14 on 2025-10-21 11:14

from django.db import migrations
import uuid


def seed_system_roles(apps, schema_editor):
    """
    Seed system roles for all existing tenants.

    Creates 5 system roles per tenant:
    - Owner: Full access (all permissions)
    - Admin: Administrative access (most permissions)
    - Manager: Management access (moderate permissions)
    - Staff: Staff member access (basic permissions)
    - Viewer: Read-only access (view-only permissions)
    """
    TenantRole = apps.get_model('rbac', 'TenantRole')
    Tenant = apps.get_model('tenant', 'Tenant')

    # Define system roles with their base permissions
    # These are common Django permission codenames
    system_roles_config = [
        {
            'name': 'Owner',
            'role_type': 'owner',
            'description': 'Full access to all features and settings. Can manage billing, users, and all business operations.',
            'permissions': [
                # User management
                'add_user', 'change_user', 'view_user',
                'add_tenantmembership', 'change_tenantmembership', 'delete_tenantmembership', 'view_tenantmembership',
                # Role management
                'add_tenantrole', 'change_tenantrole', 'delete_tenantrole', 'view_tenantrole',
                # Tenant settings
                'change_tenant', 'view_tenant',
                # Services
                'add_service', 'change_service', 'delete_service', 'view_service',
                # Staff
                'add_staffmember', 'change_staffmember', 'delete_staffmember', 'view_staffmember',
                # Customers
                'add_customer', 'change_customer', 'delete_customer', 'view_customer',
                # Bookings
                'add_booking', 'change_booking', 'delete_booking', 'view_booking',
                # Communications
                'add_notification', 'change_notification', 'delete_notification', 'view_notification',
                # Payments
                'add_payment', 'change_payment', 'delete_payment', 'view_payment',
                # Resources
                'add_resource', 'change_resource', 'delete_resource', 'view_resource',
            ],
        },
        {
            'name': 'Admin',
            'role_type': 'admin',
            'description': 'Administrative access to manage users, staff, services, and bookings. Cannot modify billing or critical settings.',
            'permissions': [
                # User management (limited)
                'add_user', 'change_user', 'view_user',
                'add_tenantmembership', 'change_tenantmembership', 'view_tenantmembership',
                # View roles (cannot edit)
                'view_tenantrole',
                # Tenant settings (view only)
                'view_tenant',
                # Services
                'add_service', 'change_service', 'delete_service', 'view_service',
                # Staff
                'add_staffmember', 'change_staffmember', 'delete_staffmember', 'view_staffmember',
                # Customers
                'add_customer', 'change_customer', 'delete_customer', 'view_customer',
                # Bookings
                'add_booking', 'change_booking', 'delete_booking', 'view_booking',
                # Communications
                'add_notification', 'change_notification', 'view_notification',
                # Payments (view only)
                'view_payment',
                # Resources
                'add_resource', 'change_resource', 'delete_resource', 'view_resource',
            ],
        },
        {
            'name': 'Manager',
            'role_type': 'manager',
            'description': 'Manage daily operations including bookings, customers, and staff schedules. Cannot modify settings or users.',
            'permissions': [
                # View users
                'view_user', 'view_tenantmembership',
                # Services (view and edit)
                'change_service', 'view_service',
                # Staff (view and schedule)
                'change_staffmember', 'view_staffmember',
                # Customers
                'add_customer', 'change_customer', 'view_customer',
                # Bookings
                'add_booking', 'change_booking', 'delete_booking', 'view_booking',
                # Communications
                'add_notification', 'view_notification',
                # Payments (view only)
                'view_payment',
                # Resources
                'change_resource', 'view_resource',
            ],
        },
        {
            'name': 'Staff',
            'role_type': 'staff',
            'description': 'Staff member access to view schedule, manage assigned bookings, and view customer information.',
            'permissions': [
                # View users
                'view_user',
                # Services (view only)
                'view_service',
                # Staff (view own profile)
                'view_staffmember',
                # Customers (view only)
                'view_customer',
                # Bookings (limited)
                'change_booking', 'view_booking',
                # Communications (view only)
                'view_notification',
                # Resources (view only)
                'view_resource',
            ],
        },
        {
            'name': 'Viewer',
            'role_type': 'viewer',
            'description': 'Read-only access to view bookings, customers, and reports. Cannot make any changes.',
            'permissions': [
                # View only
                'view_service',
                'view_staffmember',
                'view_customer',
                'view_booking',
                'view_notification',
                'view_payment',
                'view_resource',
            ],
        },
    ]

    # Get all existing tenants
    tenants = Tenant.objects.all()

    print(f"\nüîê Seeding system roles for {tenants.count()} tenant(s)...")

    for tenant in tenants:
        print(f"  üìã Tenant: {tenant.name} ({tenant.schema_name})")

        for role_config in system_roles_config:
            # Check if role already exists
            existing_role = TenantRole.objects.filter(
                tenant_id=tenant.id,
                name=role_config['name']
            ).first()

            if existing_role:
                print(f"    ‚ö†Ô∏è  Role '{role_config['name']}' already exists, skipping")
                continue

            # Create the system role
            role = TenantRole.objects.create(
                id=uuid.uuid4(),
                tenant_id=tenant.id,
                name=role_config['name'],
                role_type=role_config['role_type'],
                description=role_config['description'],
                permissions=role_config['permissions'],
                is_system=True,  # Mark as system role (protected)
                is_active=True,
            )
            print(f"    ‚úÖ Created role '{role.name}' with {len(role.permissions)} permissions")

    print("‚ú® System roles seeded successfully!\n")


def reverse_seed_system_roles(apps, schema_editor):
    """
    Remove system roles (for rollback).
    Only removes system roles, not custom roles.
    """
    TenantRole = apps.get_model('rbac', 'TenantRole')

    print("\nüîÑ Removing system roles...")
    deleted_count, _ = TenantRole.objects.filter(is_system=True).delete()
    print(f"‚úÖ Removed {deleted_count} system role(s)\n")


class Migration(migrations.Migration):

    dependencies = [
        ("rbac", "0001_initial"),
        ("tenant", "0003_tenant_app_type_tenant_enabled_modules_and_more"),  # Ensure Tenant model exists
    ]

    operations = [
        migrations.RunPython(seed_system_roles, reverse_seed_system_roles),
    ]
