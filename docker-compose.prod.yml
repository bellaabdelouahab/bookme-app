version: '3.9'

services:
  # PostgreSQL Database with increased resources
  db:
    image: postgres:16-alpine
    container_name: bookme_db_prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bookme}
      POSTGRES_USER: ${POSTGRES_USER:-bookme}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: '--encoding=UTF8 --locale=en_US.UTF-8'
    command:
      - postgres
      - -c
      - shared_buffers=256MB
      - -c
      - effective_cache_size=1GB
      - -c
      - max_connections=200
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bookme} -d ${POSTGRES_DB:-bookme}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bookme_network

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: bookme_redis_prod
    restart: always
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bookme_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bookme_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - web
    networks:
      - bookme_network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: bookme_certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Django Application (Production)
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bookme_web_prod
    restart: always
    command: gunicorn --chdir src --bind 0.0.0.0:8000 --workers 8 --worker-class sync --worker-tmp-dir /dev/shm --max-requests 1000 --max-requests-jitter 50 --timeout 60 --access-logfile - --error-logfile - --log-level info bookme.wsgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=bookme.settings.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
      replicas: 2
    networks:
      - bookme_network

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bookme_celery_worker_prod
    restart: always
    command: celery -A bookme worker --loglevel=info --concurrency=8 --max-tasks-per-child=1000
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=bookme.settings.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
      replicas: 2
    networks:
      - bookme_network

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bookme_celery_beat_prod
    restart: always
    command: celery -A bookme beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=bookme.settings.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - bookme_network

networks:
  bookme_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
