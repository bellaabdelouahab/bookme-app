[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bookme"
version = "0.1.0"
description = "Multi-tenant booking management platform"
readme = "README.md"
requires-python = ">=3.11,<3.12"
license = {text = "MIT"}
authors = [
    {name = "BookMe Team", email = "dev@bookme.ma"}
]
keywords = ["booking", "saas", "multi-tenant", "appointments"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Framework :: Django :: 5.0",
]

dependencies = [
    "Django>=5.0,<5.1",
    "djangorestframework>=3.14.0",
    "django-environ>=0.11.2",
    "psycopg[binary]>=3.1.0",
    "django-tenants>=3.5.0",
    "celery[redis]>=5.3.0",
    "redis>=5.0.0",
    "django-redis>=5.4.0",
    "djangorestframework-simplejwt>=5.3.0",
    "django-cors-headers>=4.3.0",
    "drf-spectacular>=0.27.0",
    "django-filter>=23.5",
    "phonenumbers>=8.13.0",
    "django-phonenumber-field>=7.3.0",
    "Pillow>=10.2.0",
    "boto3>=1.34.0",
    "gunicorn>=21.2.0",
    "whitenoise>=6.6.0",
    "structlog>=24.1.0",
    "python-json-logger>=2.0.7",
    "sentry-sdk>=1.40.0",
    "django-celery-beat>=2.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-django>=4.7.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "faker>=22.0.0",
    "freezegun>=1.4.0",
    "django-debug-toolbar>=4.2.0",
    "django-extensions>=3.2.0",
    "ipython>=8.20.0",
    "black>=24.1.0",
    "ruff>=0.1.14",
    "mypy>=1.8.0",
    "django-stubs>=4.2.7",
    "djangorestframework-stubs>=3.14.5",
    "pre-commit>=3.6.0",
]

prod = [
    "newrelic>=9.5.0",
    "ddtrace>=2.5.0",
]

[tool.setuptools.packages.find]
where = ["src"]
include = ["bookme*"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "*/migrations/*",
    "__pycache__",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"**/tests/**" = ["F401", "F811"]

[tool.mypy]
python_version = "3.11"
mypy_path = ["src"]
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "migrations",
    "venv",
    ".venv",
]

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "bookme.settings.local"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "bookme.settings.test"
python_files = ["test_*.py", "*_test.py", "tests.py"]
addopts = [
    "--reuse-db",
    "--nomigrations",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=80",
    "-v",
]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/__init__.py",
    "*/wsgi.py",
    "*/asgi.py",
    "*/manage.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
